#!/usr/bin/env python
import logging
from pathlib import Path
import os
import shutil

import fire


LOGGER = logging.getLogger(__name__)
DEBUG_LEVELS = {
    "DEBUG": logging.DEBUG,
    "INFO": logging.INFO,
    "WARNING": logging.WARNING,
    "ERROR": logging.ERROR,
    "CRITICAL": logging.CRITICAL,
}


def main(source: str, log_level: str = "DEBUG", dry: bool = False):
	level = DEBUG_LEVELS[log_level]
	logging.basicConfig(
		level=level,
	)

	cache_dir = Path("/network/scratch/g") / os.environ["USER"] / "autoscratcher"
	assert cache_dir.parent.exists(), cache_dir.parent
	cache_dir.mkdir(exist_ok=True)

	if dry:
		LOGGER.info("Dry run.")

	source = Path(source).resolve()
	LOGGER.debug(f"{source = }")
	home = Path.home()
	rel = source.relative_to(home)
	new = cache_dir / rel
	LOGGER.debug(f"{new = }")
	LOGGER.debug(f"Creating the new path's parent.")
	if not dry:
		new.parent.mkdir(parents=True, exist_ok=True)
		LOGGER.debug(f"Moving the source to its new path.")
		shutil.move(source, new)
		LOGGER.debug(f"Symlinking {source = } to {new = }")
		source.symlink_to(new)



if __name__ == "__main__":
	fire.Fire(main)