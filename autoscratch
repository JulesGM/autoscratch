#!/usr/bin/env python
import logging
from pathlib import Path
import os
import shutil
from typing import List, Union

import fire
try:
	import colored_traceback.auto
except ImportError:
	pass


LOGGER = logging.getLogger(__name__)
DEBUG_LEVELS = {
    "DEBUG": logging.DEBUG,
    "INFO": logging.INFO,
    "WARNING": logging.WARNING,
    "ERROR": logging.ERROR,
    "CRITICAL": logging.CRITICAL,
}


def is_subdir(pot_ancestor: Union[str, Path], maybe_subdir: Union[str, Path]) -> bool:
	pot_ancestor = Path(pot_ancestor).absolute()
	maybe_subdir = Path(maybe_subdir).absolute()
	common_prefix = os.path.commonprefix([str(pot_ancestor), str(maybe_subdir)])
	return pot_ancestor == Path(common_prefix)
	

def main(*sources: List[str], log_level: str = "INFO", dry: bool = False):
	"""
	# Autoscratch
	Moves the target file or directory to the scratch in a subdirectory imitating 
	its current position in $HOME, and then replaces it by a symlink.

	## Example:
	```
	autoscratch ~/the_project_name/model_a/checkpoints/
	```
	1. Creates a folder at 
           `/network/scratch/[u]/[username]/autoscratcher/project_name/model_a/`
	2. Moves the checkpoints folder into that folder
	3. Creates a symbolic link `/home/mila/[u]/[username]/project_name/model_a/checkpoints` 
	   to `/network/scratch/[u]/[username]/autoscratcher/project_name/model_a/checkpoints`.

	## Arguments:
	in_home: Path of the file or directory to autoscratch
	log-level: string name of the common python logging levels to filter the logging
	dry: whether or not to do a dry run.
	"""	

	level = DEBUG_LEVELS[log_level]
	logging.basicConfig(
		level=level,
		format="",
	)

	user_path_segment = Path.home().relative_to("/home/mila")
	scratch = Path("/network/scratch/") / user_path_segment
	autoscratch_dir = scratch / "autoscratch"

	assert scratch.exists(), (
		"The scratch directory is bad somehow. "
	 	f"Please file an issue. {scratch = }"
	)

	autoscratch_dir.mkdir(exist_ok=True)
	LOGGER.debug(f"{sources = }")
	LOGGER.debug(f"Autoscratch {autoscratch_dir = }")
	
	# Don't do anything if the target is already in the scratch folder

	for in_home in sources:
		in_home = Path(in_home).resolve()
		
		if not is_subdir(Path.home(), in_home):
			raise ValueError(
				"Doesn't currently work when the file is not in $HOME. "
				"Could easily be made to.\n"
				f"{Path.home()}\n"
				f"{in_home}\n"
			)

		if is_subdir(scratch, in_home):
			raise ValueError(
				"in_home is already in scratch:\n"
				"\t- {in_home = }\n"
				"\t- {scratch = }"
			)

		rel = in_home.relative_to(Path.home())			
		in_scratch = autoscratch_dir / rel
		LOGGER.debug(f"{in_scratch = }")

		if dry:
			LOGGER.info("Dry run.")
		else:
			LOGGER.info(
				"Working on:\n"
				f"\t- in_home: {in_home}\n"
				f"\t- in_scratch path: {in_scratch}"
			)
			LOGGER.debug(f"Creating the in_scratch path's parent.")
			in_scratch.parent.mkdir(parents=True, exist_ok=True)
			LOGGER.info("Moving the in_home object to its in_scratch path.")
			shutil.move(str(in_home), str(in_scratch))
			LOGGER.info(f"Symlinking.")
			in_home.symlink_to(in_scratch)
			LOGGER.info(f"Success for `{in_home}`\n")


if __name__ == "__main__":
	fire.Fire(main)
